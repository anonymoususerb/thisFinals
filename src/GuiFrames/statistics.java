package GuiFrames;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import modelUi.studyante;

/**
 *
 * @author Asus
 */
public class statistics extends javax.swing.JPanel {

private List<studyante> students;

    public statistics(List<studyante> students) {
        this.students = students;
        initComponents();
        System.out.println("Total Students: " + students.size());
        updateBarGraph();
    }

   private Map<String, Integer> getCourseCounts() {
    Map<String, Integer> courseCounts = new HashMap<>();

    System.out.println("üöÄ Checking student list size: " + (students != null ? students.size() : "students is null!"));

    if (students == null || students.isEmpty()) {
        System.out.println("‚ùå Students list is empty! No data to count.");
        return courseCounts; // Return empty if no students
    }

    for (studyante s : students) {
        System.out.println("üîç Student: " + s.getFullName() + " | Course: " + s.getCourse());
        String course = s.getCourse();

        if (course != null && !course.trim().isEmpty()) {
            courseCounts.put(course, courseCounts.getOrDefault(course, 0) + 1);
        } else {
            System.out.println("‚ö† Warning: Student " + s.getFullName() + " has no course assigned!");
        }
    }

    System.out.println("‚úÖ Final Course Data: " + courseCounts);
    return courseCounts;
}

private void updateBarGraph() {
    if (students.isEmpty()) {
        System.out.println("‚ö† Students list is empty! No data to count.");
        return;
    }

    Map<String, Integer> courseCount = new HashMap<>();
    
    for (studyante s : students) {
        if (!s.getCourse().equals("Enter student Lastname")) {  // Ignore placeholder data
            courseCount.put(s.getCourse(), courseCount.getOrDefault(s.getCourse(), 0) + 1);
        }
    }

    System.out.println("? Graph Data Being Sent to pnlBar: " + courseCount);
    
    if (courseCount.isEmpty()) {
        System.out.println("? No data to display in bar graph!");
    } else {
        pnlBar.setGraphData(courseCount);
    }
}

public void refreshData(List<studyante> updatedStudents) {
    if (updatedStudents == null) {
        System.out.println("‚ùå Cannot refresh data: updatedStudents is null!");
        return;
    }

    this.students = updatedStudents; // Update student list
    System.out.println("üîÑ Refreshing data... New size: " + students.size());

    if (students.isEmpty()) {
        System.out.println("‚ö† Students list is empty after refresh!");
    }

    updateBarGraph(); // Refresh the bar graph
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        pnlBar = new UserInterface.CustomComponents.BarGraphPanel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(204, 0, 0));

        jPanel3.setBackground(new java.awt.Color(204, 0, 0));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 0, 0), 3, true), "Student Bar Graph", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe Print", 1, 12), new java.awt.Color(102, 0, 0))); // NOI18N

        javax.swing.GroupLayout pnlBarLayout = new javax.swing.GroupLayout(pnlBar);
        pnlBar.setLayout(pnlBarLayout);
        pnlBarLayout.setHorizontalGroup(
            pnlBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 757, Short.MAX_VALUE)
        );
        pnlBarLayout.setVerticalGroup(
            pnlBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 284, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBar, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBar, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(319, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
// public void refreshData(List<studyante> updatedStudents) {
//        this.students = updatedStudents; // Update student list
//        updateBarGraph(); // Refresh the bar graph
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private UserInterface.CustomComponents.BarGraphPanel pnlBar;
    // End of variables declaration//GEN-END:variables
}
