/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.Frames;

import modelUi.studyante;
import java.io.*;
import java.util.ArrayList;
import Function.txtField;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class studentData extends javax.swing.JPanel {

    public static ArrayList<studyante> stu = new ArrayList<>();
    private static DefaultTableModel model;
    private statistics statsPanel;
    private final txtField txt = new txtField();

    public studentData(ArrayList<studyante> student, statistics statsPanel) {
        initComponents();
        this.statsPanel = statsPanel;

        if (model == null) {
            model = (DefaultTableModel) stuTable.getModel();
        } else {
            stuTable.setModel(model);
        }

        loadStudentData(); // Load students AFTER initializing model
        clearTable(); // Ensure table updates
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stuTable = new GUI.CustomComponents.MyTable();
        jPanel4 = new javax.swing.JPanel();
        txtID2 = new javax.swing.JTextField();
        txtFirstName2 = new javax.swing.JTextField();
        txtMiddleName2 = new javax.swing.JTextField();
        txtLastName2 = new javax.swing.JTextField();
        cbStatus2 = new javax.swing.JComboBox<>();
        cbYear2 = new javax.swing.JComboBox<>();
        cbCourse2 = new javax.swing.JComboBox<>();
        cbGender2 = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        btnAdd = new GUI.CustomComponents.MyButton();
        btnDelete = new GUI.CustomComponents.MyButton();
        btnUpdate = new GUI.CustomComponents.MyButton();
        txtSearch = new GUI.CustomComponents.MyTextField();

        jPanel1.setBackground(new java.awt.Color(204, 0, 0));

        stuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Name", "Gender", "Course", "Year", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stuTable.setFont(new java.awt.Font("Segoe Print", 0, 10)); // NOI18N
        jScrollPane2.setViewportView(stuTable);

        jPanel4.setBackground(new java.awt.Color(204, 0, 0));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 0, 0), 3, true), "Student Form", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe Print", 1, 14), new java.awt.Color(102, 0, 0))); // NOI18N

        txtID2.setText("Enter student ID");
        txtID2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtID2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtID2FocusLost(evt);
            }
        });
        txtID2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtID2MouseClicked(evt);
            }
        });

        txtFirstName2.setText("Enter student Firstname");
        txtFirstName2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFirstName2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFirstName2FocusLost(evt);
            }
        });
        txtFirstName2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFirstName2MouseClicked(evt);
            }
        });

        txtMiddleName2.setText("Enter student Middlename");
        txtMiddleName2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMiddleName2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMiddleName2FocusLost(evt);
            }
        });
        txtMiddleName2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtMiddleName2MouseClicked(evt);
            }
        });

        txtLastName2.setText("Enter student Lastname");
        txtLastName2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLastName2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLastName2FocusLost(evt);
            }
        });
        txtLastName2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtLastName2MouseClicked(evt);
            }
        });

        cbStatus2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please select a Status", "ENRROLED", "UNENRROLED", "DROPPED" }));

        cbYear2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please select a Year", "1ST", "2ND", "3RD", "4TH" }));
        cbYear2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbYear2ActionPerformed(evt);
            }
        });

        cbCourse2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please select a Course.", "BSBA", "BSIT", "BSED", "BEED", "BSHM" }));

        cbGender2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please select a Gender.", "Male", "Female" }));

        jLabel17.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("FIRSTNAME:");

        jLabel18.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("MIDDLENAME:");

        jLabel19.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("LASTNAME:");

        jLabel20.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("STUDENT ID:");

        jLabel21.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 0));
        jLabel21.setText("GENDER:");

        jLabel22.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 0, 0));
        jLabel22.setText("COURSE:");

        jLabel23.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 0));
        jLabel23.setText("YEAR:");

        jLabel24.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 0, 0));
        jLabel24.setText("STATUS:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(txtID2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFirstName2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(txtMiddleName2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLastName2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19))
                .addGap(38, 38, 38)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbStatus2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbYear2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cbGender2, javax.swing.GroupLayout.Alignment.LEADING, 0, 180, Short.MAX_VALUE)
                        .addComponent(cbCourse2, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel21)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbGender2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtID2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbCourse2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel23)
                        .addGap(140, 140, 140))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFirstName2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMiddleName2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbYear2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLastName2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbStatus2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40))))
        );

        btnAdd.setBackground(new java.awt.Color(255, 0, 0));
        btnAdd.setForeground(new java.awt.Color(0, 0, 0));
        btnAdd.setText("ADD");
        btnAdd.setBorderColor(new java.awt.Color(255, 0, 0));
        btnAdd.setColor(new java.awt.Color(255, 0, 0));
        btnAdd.setColorClick(new java.awt.Color(255, 153, 153));
        btnAdd.setColorOver(new java.awt.Color(255, 102, 102));
        btnAdd.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        btnAdd.setRadius(40);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete.setForeground(new java.awt.Color(0, 0, 0));
        btnDelete.setText("DELETE");
        btnDelete.setBorderColor(new java.awt.Color(255, 0, 0));
        btnDelete.setColor(new java.awt.Color(255, 0, 0));
        btnDelete.setColorClick(new java.awt.Color(255, 153, 153));
        btnDelete.setColorOver(new java.awt.Color(255, 102, 102));
        btnDelete.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        btnDelete.setRadius(40);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 0, 0));
        btnUpdate.setForeground(new java.awt.Color(0, 0, 0));
        btnUpdate.setText("UPDATE");
        btnUpdate.setBorderColor(new java.awt.Color(255, 0, 0));
        btnUpdate.setColor(new java.awt.Color(255, 0, 0));
        btnUpdate.setColorClick(new java.awt.Color(255, 153, 153));
        btnUpdate.setColorOver(new java.awt.Color(255, 102, 102));
        btnUpdate.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        btnUpdate.setRadius(40);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtSearch.setText("Search student id, name, gender, course, year, and status");
        txtSearch.setCustomIcon1(new javax.swing.ImageIcon(getClass().getResource("/Icon/Github-Octicons-Search-16.24.png"))); // NOI18N
        txtSearch.setRadius(20);
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(34, 34, 34))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                                .addGap(15, 15, 15))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbYear2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbYear2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbYear2ActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        String searchText = txtSearch.getText().trim().toLowerCase();

        if (searchText.isEmpty()) {
            restoreTableData(); // Restore full table when search is cleared
            return;
        }

        model.setRowCount(0); // Clear table before search
        boolean found = false; // Track if any result is found

        for (studyante s : stu) {
            boolean matches = false;

            // Check for exact Student ID match
            if (searchText.matches("\\d+")) { // If input is all numbers
                int searchID = Integer.parseInt(searchText);
                if (s.getStuID() == searchID) {
                    matches = true;
                }
            } // Check for exact match in other fields
            else if (s.getFirstName().equalsIgnoreCase(searchText)
                    || s.getMiddleInitial().equalsIgnoreCase(searchText)
                    || s.getLastName().equalsIgnoreCase(searchText)
                    || s.getGender().equalsIgnoreCase(searchText)
                    || // Male/Female match
                    s.getCourse().equalsIgnoreCase(searchText)
                    || s.getYearLvl().equalsIgnoreCase(searchText)
                    || s.getStatus().equalsIgnoreCase(searchText)) {

                matches = true;
            }

            if (matches) {
                model.addRow(new Object[]{
                    s.getStuID(),
                    s.getFullName(),
                    s.getGender(),
                    s.getCourse(),
                    s.getYearLvl(),
                    s.getStatus()
                });
                found = true;
            }
        }

        // If no matching results were found, show an alert
        if (!found) {
            JOptionPane.showMessageDialog(this, "No matching student record found!", "Search Result", JOptionPane.INFORMATION_MESSAGE);
            restoreTableData(); // Restore full table display if nothing is found
        }
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            String idText = txtID2.getText().trim();

            // Prevent using placeholder text as input
            if (idText.equals("Enter student ID") || idText.isEmpty() || !idText.matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "Student ID must contain only numbers!", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int stuID = Integer.parseInt(idText);

            // Check if Student ID already exists
            for (studyante s : stu) {
                if (s.getStuID() == stuID) {
                    JOptionPane.showMessageDialog(this, "Student ID already exists!", "Duplicate Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Get text input fields and prevent placeholder text
            String firstName = txtFirstName2.getText().trim();
            String lastName = txtLastName2.getText().trim();
            String middleInitial = txtMiddleName2.getText().trim();

            // Validate that names contain only letters and spaces
            if (!firstName.matches("[a-zA-Z ]+") || !lastName.matches("[a-zA-Z ]+")) {
                JOptionPane.showMessageDialog(this, "First Name and Last Name must only contain letters!", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Ensure First Name and Last Name are not empty or placeholders
            if (firstName.equals("Enter student Firstname") || firstName.isEmpty()
                    || lastName.equals("Enter student Lastname") || lastName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "First Name and Last Name are required!", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Ensure middle name is not blank (keep it empty if unchanged)
            if (middleInitial.equals("Enter student Middlename") || middleInitial.isEmpty()) {
                middleInitial = ""; // Keep blank instead of placeholder
            }

            // Validate middle initial if entered (must contain only letters)
            if (!middleInitial.isEmpty() && !middleInitial.matches("[a-zA-Z]+")) {
                JOptionPane.showMessageDialog(this, "Middle Name must only contain letters!", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Get combo box selections
            int genderIndex = cbGender2.getSelectedIndex();
            int courseIndex = cbCourse2.getSelectedIndex();
            int yearLvlIndex = cbYear2.getSelectedIndex();
            int statusIndex = cbStatus2.getSelectedIndex();

            // Ensure valid selections for combo boxes
            if (genderIndex == 0 || courseIndex == 0 || yearLvlIndex == 0 || statusIndex == 0) {
                JOptionPane.showMessageDialog(this, "Please select valid options for Gender, Course, Year Level, and Status!", "Selection Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Get selected values after validation
            String gender = (String) cbGender2.getSelectedItem();
            String course = (String) cbCourse2.getSelectedItem();
            String yearLvl = (String) cbYear2.getSelectedItem();
            String status = (String) cbStatus2.getSelectedItem();

            // Add new student to the list
            stu.add(new studyante(stuID, firstName, middleInitial, lastName, gender, course, yearLvl, status));

            // Refresh the table
            clearTable(); // ✅ Clears table and reloads student list
            saveStudentData(); // ✅ Save after updating table
            resetFields(); // ✅ Clears input fields
            stuTable.repaint(); // ✅ Refresh UI
            stuTable.revalidate();

            JOptionPane.showMessageDialog(this, "Student added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Student ID format!", "Input Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void txtID2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtID2FocusGained
        if (txtID2.getText().equals("Enter student ID")) {
            txtID2.setText(null);
        }
    }//GEN-LAST:event_txtID2FocusGained

    private void txtID2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtID2FocusLost
        if (txtID2.getText().isEmpty()) {
            txtID2.setText("Enter student ID");
        }
    }//GEN-LAST:event_txtID2FocusLost

    private void txtFirstName2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstName2FocusGained
        if (txtFirstName2.getText().equals("Enter student Firstname")) {
            txtFirstName2.setText(null);
        }
    }//GEN-LAST:event_txtFirstName2FocusGained

    private void txtFirstName2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstName2FocusLost
        if (txtFirstName2.getText().isEmpty()) {
            txtFirstName2.setText("Enter student Firstname");
        }
    }//GEN-LAST:event_txtFirstName2FocusLost

    private void txtMiddleName2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMiddleName2FocusGained
        if (txtMiddleName2.getText().equals("Enter student Middlename")) {
            txtMiddleName2.setText(null);
        }
     }//GEN-LAST:event_txtMiddleName2FocusGained

    private void txtMiddleName2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMiddleName2FocusLost
        if (txtMiddleName2.getText().isEmpty()) {
            txtMiddleName2.setText("Enter student Middlename");
        }
    }//GEN-LAST:event_txtMiddleName2FocusLost

    private void txtLastName2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastName2FocusGained
        if (txtLastName2.getText().equals("Enter student Lastname")) {
            txtLastName2.setText(null);
        }
    }//GEN-LAST:event_txtLastName2FocusGained

    private void txtLastName2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastName2FocusLost
        if (txtLastName2.getText().isEmpty()) {
            txtLastName2.setText("Enter student Lastname");
        }
    }//GEN-LAST:event_txtLastName2FocusLost

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = stuTable.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student to update!", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Get selected student object
        studyante selectedStudent = stu.get(selectedRow);

        // Get text fields, checking if they are empty or placeholders
        String firstName = txtFirstName2.getText().trim();
        String lastName = txtLastName2.getText().trim();
        String middleInitial = txtMiddleName2.getText().trim();

        // Keep the old data if the field is unchanged or still has the placeholder
        if (firstName.equals("Enter student Firstname") || firstName.isEmpty()) {
            firstName = selectedStudent.getFirstName();
        }
        if (lastName.equals("Enter student Lastname") || lastName.isEmpty()) {
            lastName = selectedStudent.getLastName();
        }
        if (middleInitial.equals("Enter student Middlename") || middleInitial.isEmpty()) {
            middleInitial = selectedStudent.getMiddleInitial();
        }

        // Handle combo box selections (if index is 0, keep the old value)
        String gender = cbGender2.getSelectedIndex() == 0 ? selectedStudent.getGender() : (String) cbGender2.getSelectedItem();
        String course = cbCourse2.getSelectedIndex() == 0 ? selectedStudent.getCourse() : (String) cbCourse2.getSelectedItem();
        String yearLvl = cbYear2.getSelectedIndex() == 0 ? selectedStudent.getYearLvl() : (String) cbYear2.getSelectedItem();
        String status = cbStatus2.getSelectedIndex() == 0 ? selectedStudent.getStatus() : (String) cbStatus2.getSelectedItem();

        // Check if anything has actually changed
        if (firstName.equals(selectedStudent.getFirstName())
                && lastName.equals(selectedStudent.getLastName())
                && middleInitial.equals(selectedStudent.getMiddleInitial())
                && gender.equals(selectedStudent.getGender())
                && course.equals(selectedStudent.getCourse())
                && yearLvl.equals(selectedStudent.getYearLvl())
                && status.equals(selectedStudent.getStatus())) {

            JOptionPane.showMessageDialog(this, "No changes were made!", "Update Notice", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Update the student details (DO NOT UPDATE Student ID)
        selectedStudent.setFirstName(firstName);
        selectedStudent.setMiddleInitial(middleInitial);
        selectedStudent.setLastName(lastName);
        selectedStudent.setGender(gender);
        selectedStudent.setCourse(course);
        selectedStudent.setYearLvl(yearLvl);
        selectedStudent.setStatus(status);

        // Save updated data
        saveStudentData();
        clearTable();
        resetFields(); // Clear input fields after update
        stuTable.repaint();
        stuTable.revalidate();

        JOptionPane.showMessageDialog(this, "Student updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = stuTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student to delete!", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this student?", "Confirm Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            stu.remove(selectedRow);
            saveStudentData();
            clearTable();
            JOptionPane.showMessageDialog(this, "Student deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtID2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtID2MouseClicked
        txt.checkTextField(txtID2, "Enter student ID");
    }//GEN-LAST:event_txtID2MouseClicked

    private void txtFirstName2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFirstName2MouseClicked
        txt.checkTextField(txtFirstName2, "Enter student Firstname");    }//GEN-LAST:event_txtFirstName2MouseClicked

    private void txtMiddleName2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMiddleName2MouseClicked
        txt.checkTextField(txtMiddleName2, "Enter student Middlename");
    }//GEN-LAST:event_txtMiddleName2MouseClicked

    private void txtLastName2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtLastName2MouseClicked
        txt.checkTextField(txtLastName2, "Enter student Lastname");
    }//GEN-LAST:event_txtLastName2MouseClicked

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        if (txtSearch.getText().equals("Search student id, name, gender, course, year, and status")) {
            txtSearch.setText(null);
        }
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        if (txtSearch.getText().isEmpty()) {
            txtSearch.setText("Search student id, name, gender, course, year, and status");
        }
    }//GEN-LAST:event_txtSearchFocusLost

    private void clearTable() {
        if (model == null) {
            System.out.println("⚠ Table model is null, cannot clear table!");
            return;
        }

        model.setRowCount(0); // Clears existing rows
        System.out.println("🗑 Clearing table and adding students: " + stu.size());

        for (studyante s : stu) {
            System.out.println("📌 Adding Student: " + s.getStuID() + " | " + s.getFullName() + " | " + s.getCourse());
            model.addRow(new Object[]{s.getStuID(), s.getFullName(), s.getGender(), s.getCourse(), s.getYearLvl(), s.getStatus()});
        }
    }

    private void saveStudentData() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("students.dat"))) {
            oos.writeObject(stu);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void refreshData(ArrayList<studyante> updatedStudents) {
        stu = updatedStudents;
        clearTable();
    }

    private void loadStudentData() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("students.dat"))) {
            stu = (ArrayList<studyante>) ois.readObject();
            System.out.println("✅ Student data loaded successfully! Total students: " + stu.size());

            for (studyante s : stu) {
                System.out.println("📌 Loaded Student: " + s.getStuID() + " | " + s.getFullName() + " | " + s.getCourse());
            }
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("⚠ No previous data found or error loading data.");
            stu = new ArrayList<>(); // Ensure stu is not null
        }

        clearTable(); // ✅ Ensure table updates AFTER data load

        if (statsPanel != null) {
            System.out.println("📊 Updating statistics panel...");
            statsPanel.refreshData(stu); // ✅ Now updating AFTER data load
        } else {
            System.out.println("⚠ Warning: statsPanel is null, cannot refresh statistics!");
        }
    }

    private void resetFields() {
        txtID2.setText("Enter student ID");
        txtFirstName2.setText("Enter student Firstname");
        txtMiddleName2.setText("Enter student Middlename");
        txtLastName2.setText("Enter student Lastname");

        cbGender2.setSelectedIndex(0);
        cbCourse2.setSelectedIndex(0);
        cbYear2.setSelectedIndex(0);
        cbStatus2.setSelectedIndex(0);
    }

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {
        txtSearchActionPerformed(null);
    }

    private void restoreTableData() {
        model.setRowCount(0);
        for (studyante s : stu) {
            model.addRow(new Object[]{
                s.getStuID(),
                s.getFullName(),
                s.getGender(),
                s.getCourse(),
                s.getYearLvl(),
                s.getStatus()
            });
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private GUI.CustomComponents.MyButton btnAdd;
    private GUI.CustomComponents.MyButton btnDelete;
    private GUI.CustomComponents.MyButton btnUpdate;
    private javax.swing.JComboBox<String> cbCourse2;
    private javax.swing.JComboBox<String> cbGender2;
    private javax.swing.JComboBox<String> cbStatus2;
    private javax.swing.JComboBox<String> cbYear2;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private GUI.CustomComponents.MyTable stuTable;
    private javax.swing.JTextField txtFirstName2;
    private javax.swing.JTextField txtID2;
    private javax.swing.JTextField txtLastName2;
    private javax.swing.JTextField txtMiddleName2;
    private GUI.CustomComponents.MyTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}
